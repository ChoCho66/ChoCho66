global

// JavaScript code
function gen_matrix(nrow, ncol) {
	let results = "";
	let order = 1;
	for (var i=0; i < nrow; i++){
		results += ' ';
		for(var j = 0; j < ncol - 1; j++){
			results += "$" + (order).toString() + " & ";
			order ++;
		}
		results += "$" + (order).toString() + " \\\\" + "\\";
		order ++;
	}
	return results;
}

function gen_matrix_transposed(nrow, ncol) {
	let results = "";
	for (var i = 0; i < nrow; i++){
		results += ' ';
        var j = 0;
		for(; j < ncol - 1;j++){
			results += "$" + (i + j * ncol + 1).toString() + " & ";
		}
		results += "$" + (i + j * ncol + 1).toString() + " \\\\" + "\\";
	}
	return results;
}

function tes_matrix(nrow, ncol,t) {
	let results = "";
	let order = 1;
	for (var i=0; i<nrow; i++){
		results += '	';
		for(var j = 0;j <ncol-1;j++){
			if (order > 1 ){
				results += "${" +(order ).toString() + ":" + t[order-2] + "}\t & ";
			}
			else{
				results += "$" +(order ).toString()  + " & ";
			}
			order ++;
		}
		results += "$"+(order).toString() +" \\\\" + "\\ ";
		order ++;
	}
	return results;
}

// 输出一个表格
function createTable(rows, cols) {
    let ret = "";
    let order = 1;
    for (let i = 0; i < parseInt(rows) + 2; i++) {
        for (let j = 0; j < parseInt(cols); j++) {
            if (i === 1) {
                ret += "|---";
            } else {
                ret += "| $" + (order).toString() + " ";
                order++;
            }
        }
        ret += "|\n"
    }
    return ret;
}

const greek  = {
    "al" : "alpha",
    "be" : "beta",
    // "chi" : "chi",
    "del" : "delta",
    "eps" : "varepsilon",
    // "ve": "varepsilon",
    // "phi" : "phi",
    // "vf" : "varphi",
    "ga" : "gamma",
    // "eta" : "eta",
    // "i" : "iota",
    "vphi" : "varphi",
    "ka" : "kappa",
    "vka": "varkappa",
    "lam" : "lambda",
    // "mu" : "mu",
    // "nu" : "nu",
    "omi" : "omicron",
    // "pi" : "pi",
    "vpi" : "varpi",
    "the" : "theta",
    "vthe" : "vartheta",
    // "rho" : "rho",
    "sig" : "sigma",
    "vsig" : "varsigma",
    // "tau" : "tau",
    // "u" : "upsilon",
    "ome" : "omega",
    // "xi" : "xi",
    // "psi" : "psi",
    "ze" : "zeta",
    "Al" : "Alpha",
    "Be" : "Beta",
    // "Chi" : "Chi",
    "Del" : "Delta",
    // "Eps" : "Epsilon",
    // "Phi" : "Phi",
    "Ga" : "Gamma",
    // "Eta" : "Eta",
    // "I" : "Iota",
    "Ka" : "Kappa",
    "Lam" : "Lambda",
    // "Mu" : "Mu",
    // "Nu" : "Nu",
    "Omi" : "Omicron",
    // "Pi" : "Pi",
    "The" : "Theta",
    // "Rho" : "Rho",
    "Sig" : "Sigma",
    // "Tau" : "Tau",
    // "U" : "Upsilon",
    "Ome" : "Omega",
    // "Xi" : "Xi",
    // "Psi" : "Psi",
    "Ze" : "Zeta",
};

const prefix = {
  "bar" : "overline",
  "til" : "widetilde",
  "hat" : "widehat",
  "..." : "cdots",
  "oo" : "infty",
  "X" : "times",
  "grad" : "nabla",
  "dd" : "partial",
  "setm" : "backslash",
  "of" : "circ",
    // "bar" : ["\\\\overline{"             ,"}"   ],
    // "fn"  : ["\\\\overset{\\\\frown}{"   ,"}"   ],
    // "td"  : ["\\\\widetilde{"            ,"}"   ],
    // "rm"  : ["\\\\mathrm{"               ,"}"   ],
    // "hat" : ["\\\\hat{"                  ,"}"   ],
    // "cr"  : ["\\\\mathscr{"              ,"}"   ],
    // "bav" : ["\\\\hat{\\\\boldsymbol{"   ,"}}"  ],
    // "vec" : ["\\\\vec{"                  ,"}"   ],
    // "bm"  : ["\\\\boldsymbol{"           ,"}"   ],
    // "bf"  : ["\\\\mathbf{"               ,"}"   ],
    // "cal" : ["\\\\mathcal{"              ,"}"   ],
    // "dot"  : ["\\\\dot{"                  ,"}"   ],
    // "vdot" : ["\\\\dot{\\\\boldsymbol{"   ,"}}"  ]
};

const prefixmath = {
  "bb" : "mathbb",
  "bf" : "mathbf",
  "cal" : "mathcal",
  "rm" : "mathrm",
  "frak" : "mathfrak",
  "tt" : "mathtt",
  "opn" : "operatorname",
};

const arrow = {
  "->" : "rightarrow",
  "<-" : "leftarrow",
  "-->" : "longrightarrow",
  "=>" : "implies",
  "<~" : "lesssim",
  ">~" : "gtrsim",
  "~=" : "approx",
  ">=" : "geq",
  "<=" : "leq",
  "!=" : "neq",
  "==" : "equiv",
};

endglobal



# == Some notation ==

#snippet `([a-z]*)::` iA
#``rv=m[1]``(${VISUAL})$0
#endsnippet

#snippet $$ "$$" iAm
#$$
#${1:${VISUAL}}
#$$
#$0
#endsnippet

snippet \qu "quad" iAm
\quad
endsnippet

priority 200
snippet // "Fraction" iAm
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet

# 數字大的先
priority 300
snippet d// "Fraction" iAm
\\dfrac{${1:${VISUAL}}}{$2}$0
endsnippet

snippet _~ "underbrace" iAm
\\underbrace{${1:${VISUAL}}}_{$2}$0
endsnippet

snippet __ "underline" iAm
\\underline{${1:${VISUAL}}}$0
endsnippet

snippet ^^ "overline" iAm
\\overline{${1:${VISUAL}}}$0
endsnippet

snippet ~~ "widetilde" iAm
\\widetilde{${1:${VISUAL}}}$0
endsnippet

snippet `(?<!\|)\| \|(?!\|)` "abs" iAm
\\left\\lvert ${1:${VISUAL}}$2 \\right\\rvert
endsnippet

priority 100
snippet `\\\|` "vert" iAm
\\vert
endsnippet

priority 300
snippet `\\\\\|` "vert" iAm
\\Vert
endsnippet

snippet `\|\| \|\|` "norm" iAm
\\left\\lVert ${1:${VISUAL}}$2 \\right\\rVert
endsnippet

snippet `(->|<-|-->|=>|<~|>~|~=|>=|<=|!=|~=|==)` "arrow" iAm
\\``rv=arrow[m[1]]``
endsnippet

snippet `\b(?<!\\)([a-zA-Z]*)text\b` "text" iAm
\\text{``rv=m[1]``${1:${VISUAL}}}$0
endsnippet

snippet `\b(?<!\\)([a-zA-Z]*)(red|blue)\b` "color" iAm
\\color{``rv=m[2]``}{``rv=m[1]``${1:${VISUAL}}}$0
endsnippet

snippet `\b(?<!\\)(bb|bf|cal|rm|frak|tt|opn)\b` "mathbb by VISUAL" iAm
\\``rv=prefixmath[m[1]]``{${1:${VISUAL}}}$0
endsnippet

snippet `\b(?<!\\)([a-zA-Z]{1})(bb|bf|cal|rm|frak|tt|opn)\b` "mathbb by a word" iAm
\\``rv=prefixmath[m[2]]``{``rv=m[1]``}$0
endsnippet

snippet `\b([A-Z])\1\b` "mathbb X by XX" iAm
\\mathbb ``rv=m[1]``
endsnippet

snippet `\b(?<!\\)([a-zA-Z]{1})(bar|til|hat)\b` "prefix by a word" iAm
\\``rv=prefix[m[2]]``{``rv = m[1]``}$0
endsnippet

snippet `\b(?<!\\)(bar|til|hat)\b` "prefix by by VISUAL" iAm
\\``rv = prefix[m[1]]``{${VISUAL}$1}
endsnippet

snippet `\\(al|be|del|eps|ga|vphi|ka|vka|lam|omi|vpi|the|vthe|sig|vsig|ome|ze|Al|Be|Del|Ga|Ka|Lam|Omi|The|Sig|Ome|Ze)\b` "greek need \" iAm
\\``rv = greek[m[1]]``
endsnippet

snippet `\b(?<!\\)(exp|log|sin|cos|tan|cot|sec|csc)\b` "prefix without \" iAm
\\``rv = m[1]``
endsnippet

snippet `\\(oo|grad|setm|of|dd|X)\b` "prefix need \" iAm
\\``rv = prefix[m[1]]``
endsnippet

#snippet `(?<!\S)\\(d|X)\b` "prefix need \" iAm



snippet \... "prefix need \" iAm
\\cdots
endsnippet

snippet `\\*sqrt` "sqrt" iAm
\\sqrt{${1:${VISUAL}}}$2
endsnippet

snippet of "prefix without \" iAm
\\circ
endsnippet

#snippet til "til" iAm
#snippet `([^\\])(til)` "bar" iAm
#``rv = m[1]``\\widetilde{${VISUAL}$1}
#endsnippet

#snippet `(^(?!\\).*)(test)` "test" iAm
#``rv = m[1]+"___"+m[2]+"_____"``
#endsnippet
#\\frac{${TM_SELECTED_TEXT}$1}{$2}$0






#snippet `^((?!\\[a-z]*test).)*$` "test" iAm
#$TM_SELECTED_TEXT
#endsnippet


priority 100
snippet `\b([A-Za-z])(\d)` "auto subscript" iAm
`` rv = m[1] + "_" + m[2]``
endsnippet

snippet filename "Current Filename"
``rv = require('path').basename(path)``
endsnippet

#``rv=require("vscode").window.activeTextEditor.document.fileName``


# ==== Dynamic Matrix ====

priority 300
snippet `(b|p|v)mata([1-9])` "bmatrix" iiAm
\\begin{``rv = m[1]``matrix}``
	let len = m[2];
	let results = "";
	for (var i=0; i<len; i++){
		results += "$1 &".repeat(len-1) + " $1 \\\\\\\\";
	}
	rv = results;
``\\end{``rv = m[1]``matrix}$0
endsnippet

priority 300
snippet `(b|p|v)mat([1-9])([1-9])` "bmatrix" iiAm
\\begin{``rv = m[1]``matrix}``
	rv = gen_matrix(m[2],m[3]);
``\\end{``rv = m[1]``matrix}$0
endsnippet

priority 2000
snippet `(b|p|v)matr([1-9]{1})` "bmatrix" iiAm
\\begin{``rv = m[1]``matrix}``
	rv = gen_matrix_transposed(m[2],m[2]);
``\\end{``rv = m[1]``matrix}$0
endsnippet

priority 300
snippet `vec([1-9])` "col vector" iiAm
\\begin{bmatrix}``
    rv = gen_matrix(m[1], 1);
``\\end{bmatrix}$0
endsnippet

priority 300
snippet `vecr([1-9])` "row vector" iiAm
\\begin{bmatrix}``
    rv = gen_matrix(1, m[1]);
``\\end{bmatrix}$0
endsnippet

snippet cases "cases" iiAm
\\begin{cases}
  $1
\\end{cases}$0
endsnippet

snippet `d(s|t|x|y|z|u|v)` "dt" iiAm
\\mathrm{d}``rv=m[1]``
endsnippet

snippet `d([A-Z])(s|t)` "dBt" iiAm
\\mathrm{d}``rv=m[1]``_``rv=m[2]``
endsnippet